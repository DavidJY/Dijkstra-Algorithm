package fds.practica;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 * Esta clase permite lanzar una interfaz gráfica para interactuar con la aplicación.
 * <p>
 * Técnica utilizada: Dijkstra modificado para ser no dirigido.
 * 
 * @author      David Julián Yela
 * @version     1.0
 * 
 * @see         ImageIcon
 * @see         Algoritmo
 * @see         Nodo
 * @see         Arista
 * @see         PanelFondo
 * @see         HeadlessException
 * @see         SecurityException
 */

public class MainVentana extends javax.swing.JFrame {

     /**
     * <code>ImageIcon</code> que indica la ubicación del indicador verde que se mostrará junto
     * a los botones activados en la IU.
     */
    
    private ImageIcon imagOK = new ImageIcon(getClass().getResource("/fds/practica/images/verde_ok.png"));
    
     /**
     * <code>ImageIcon</code> que indica la ubicación del indicador rojo que se mostrará junto
     * a los botones desactivados en la IU.
     */
    
    private ImageIcon imagNO = new ImageIcon(getClass().getResource("/fds/practica/images/rojo_no.png"));

     /**
     * <code>Algoritmo</code>, objeto de la clase Algoritmo que permite realizar las
     *  operaciones definidas en él.
     */
    
    private Algoritmo algoritmo = new Algoritmo ();
    
     /**
     * <code>String</code> que almacenará la solución generada tras la ejecución del 
     *  algoritmo de Dijkstra.
     */
    
    private String solucion = "";
    
     /**
     * <code>String</code> que indica cuál es el nodo origen del grafo, por defecto
     *  es "FUENTE" pero puede cambiarse desde el programa con UI.
     */
    
    private String origen = "FUENTE";
    
     /**
     * Constructor de la clase MainVentana, inicializa los componentes de la interfaz.
     */
    
    public MainVentana() {
        initComponents();
        
        this.setTitle("FDS - Práctica algoritmia <<David Julián Yela>>");
        this.setSize(640, 480);
        this.setLocationRelativeTo(null);
        
        PanelFondo pnlFondo = new PanelFondo();
        this.add(pnlFondo, BorderLayout.CENTER);
        this.pack();
        
        // Cambio del color del jTextArea
        jTextArea1.setOpaque(false);
        jTextArea1.setBackground(new Color(0,0,0, 0));
        
        this.reiniciarComponentes(0);

        jLabel1.setVerticalAlignment(SwingConstants.TOP);
    }    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(640, 480));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(640, 480));
        setResizable(false);

        jLabel1.setText("ASIGNATURAS MATRICULADAS:");
        jLabel1.setMaximumSize(new java.awt.Dimension(156, 200));
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jButton1.setText("CARGAR ARCHIVO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fds/practica/images/rojo_no.png"))); // NOI18N

        jButton2.setText("GUARDAR ARCHIVO");
        jButton2.setMaximumSize(new java.awt.Dimension(123, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(123, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(15);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(4);
        jTextArea2.setMaximumSize(new java.awt.Dimension(180, 76));
        jTextArea2.setMinimumSize(new java.awt.Dimension(180, 76));
        jTextArea2.setOpaque(false);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fds/practica/images/rojo_no.png"))); // NOI18N

        jButton3.setText("EJECUTAR ALGORITMO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fds/practica/images/rojo_no.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 282, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(34, 34, 34))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(237, 237, 237))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (this.leerFichero()) {                                
            JOptionPane.showMessageDialog(this,
                "El fichero se ha cargado correctamente.\n¡Ya puedes ejecutar el algoritmo!");
            this.reiniciarComponentes(1);
            
        } 
        
    }//GEN-LAST:event_jButton1ActionPerformed
 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (guardarFichero(solucion)) {            
            JOptionPane.showMessageDialog(this,
                "¡El fichero se ha guardado correctamente!\nPuedes cargar otro fichero nuevo para reiniciar la aplicación.");
            
            reiniciarComponentes(3);
            
        } else {            
            reiniciarComponentes(2);
            
        }        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        solucion = algoritmo.executeDijkstra("FUENTE");
        
        if (!solucion.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Se ha ejecutado el algoritmo y se han hallado los caminos mínimos.\n¡Recuerda que puedes guardar la salida en un fichero!");
            
            jTextArea2.setText(solucion);        
            reiniciarComponentes(2);
            
        }

    }//GEN-LAST:event_jButton3ActionPerformed
   
     /** 
     * Este método permite leer un fichero de texto con la definición del grafo.
     * 
     * @return          <code>true</code> si la lectura se ha hecho satisfactoriamente, <code>false</code> 
     *                  en caso contrario.
     * 
     * @see             jFileChooser
     * @see             HeadlessException
     * @see             SecurityException
     */
    
    private boolean leerFichero () {
        
        boolean resultado;
        
        final JFileChooser fc = new JFileChooser();

        try {
            
            int returnVal = fc.showOpenDialog(MainVentana.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {

                File file = fc.getSelectedFile();

                if (algoritmo.leerFichero(file.getAbsolutePath())) {
                    
                    // Se ejecuta el algoritmo Dijkstra
                    algoritmo.executeDijkstra(origen);
                    
                    // Se obtiene la lista de asignaturas para mostrarlas en el 
                    // tablón (jTextArea1)
                    ArrayList<String> asignaturas = algoritmo.getMatriculadas();
                    jTextArea1.setText(asignaturas.toString());
                    
                    this.reiniciarComponentes(1);
                    
                    resultado = true;
                    
                    System.out.println("Se ha ejecutado el algoritmo correctamente...");
                    
                } else {
                                
                    JOptionPane.showMessageDialog(this,
                        "El fichero elegido no tiene el formato adecuado.", "Atención", JOptionPane.ERROR_MESSAGE);

                    this.reiniciarComponentes(0);                    
                    resultado = false;
                    
                }

            } else {
                
                System.out.println("La apertura ha sido cancelada por el usuario.");
                reiniciarComponentes(0);
                resultado = false;
                
            }
            
        } catch (HeadlessException | SecurityException e) {

            reiniciarComponentes(0);
            
            JOptionPane.showMessageDialog(this,
                "No se ha podido cargar el fichero.", "Atención", JOptionPane.ERROR_MESSAGE);
            
            resultado = false;
            
        }
        
        return resultado;
    }
    
     /** 
     * Este método permite guardar un fichero de texto con la solución del
     * algoritmo.
     * 
     * @param salida    <String> que guarda el resultado del algoritmo y que será
     *                  escrito en el fichero de texto.
     * @return          <code>true</code> si la escritura se ha hecho satisfactoriamente, <code>false</code> 
     *                  en caso contrario.
     * 
     * @see             jFileChooser
     */
    
    private boolean guardarFichero (String salida) {
        
        boolean guardado = false;

        JFileChooser chooser = new JFileChooser();
        
        int retrival = chooser.showSaveDialog(MainVentana.this);
        
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try (FileWriter fw = new FileWriter(chooser.getSelectedFile()+".txt")) {
                String [] parciales = salida.split("\n");
                
                for (String linea : parciales) {
                    fw.write(linea);
                    fw.append(System.lineSeparator());
                }
                
                guardado = true;
                
            } catch (Exception e) {
                System.out.println("Error al tratar de guardar el archivo:\n"+e.getMessage());
                guardado = false;
                
            }
            
        }        
        return guardado;
        
    } // FIN guardarFichero
    
     /** 
     * Este método simplifica la tarea de actualizar los componentes de la interfaz
     * dependiendo del paso en el que se encuentre la ejecución.
     * 
     * @param opcion    <code>int</code> que indica el paso en el que se encuentra la aplicación.
     */
    
    private void reiniciarComponentes (int opcion) {
        
        switch (opcion) {
            case 0: // Paso 1: Aplicación reiniciada
                
                jLabel2.setIcon(imagNO); // Bola roja botón leer fichero
                jLabel3.setIcon(imagNO); // Bola roja botón ejecutar algoritmo
                jLabel4.setIcon(imagNO); // Bola roja botón guardar fichero
                
                jTextArea1.setText(""); // TextArea del corcho
                jTextArea2.setText(""); // TextArea de la consola
                
                jButton3.setEnabled(false); // Botón de ejecutar algoritmo
                jButton2.setEnabled(false); // Botón de guardar fichero
                jButton1.setEnabled(true); // Botón de cargar fichero
                
                break;
                
            case 1: // Paso 2: Archivo cargado
                
                // Si el entero opción es 1 se reinicia desde el paso 2
                jLabel2.setIcon(imagOK); // Bola roja botón leer fichero
                jLabel3.setIcon(imagNO); // Bola roja botón ejecutar algoritmo
                jLabel4.setIcon(imagNO); // Bola roja botón guardar fichero
                
                jButton3.setEnabled(true); // Botón de ejecutar algoritmo
                jButton2.setEnabled(false); // Botón de guardar fichero
                jButton1.setEnabled(true); // Botón de cargar fichero
                
                break;
                
            case 2: // Paso 3: Se ha ejecutado el algoritmo
                
                // Si el entero opción es 2 se reinicia desde el paso 3
                jLabel2.setIcon(imagOK); // Bola roja botón leer fichero
                jLabel3.setIcon(imagOK); // Bola roja botón ejecutar algoritmo
                jLabel4.setIcon(imagNO); // Bola roja botón guardar fichero
                
                jButton3.setEnabled(true); // Botón de ejecutar algoritmo
                jButton2.setEnabled(true); // Botón de guardar fichero
                jButton1.setEnabled(true); // Botón de cargar fichero
                
                break;
                
            case 3: // Paso 4: Se ha guardado la salida en un fichero
                
                // Si el entero opción es 2 se reinicia desde el paso 3
                jLabel2.setIcon(imagOK); // Bola roja botón leer fichero
                jLabel3.setIcon(imagOK); // Bola roja botón ejecutar algoritmo
                jLabel4.setIcon(imagOK); // Bola roja botón guardar fichero
                
                jButton3.setEnabled(true); // Botón de ejecutar algoritmo
                jButton2.setEnabled(true); // Botón de guardar fichero
                jButton1.setEnabled(true); // Botón de cargar fichero
                
                break;                
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainVentana().setVisible(true);
                
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
